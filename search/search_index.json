{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Megha Thumma's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li> <p>Primary author: Megha Thumma</p> </li> <li> <p>Reviewer: Nithya Indlamuri</p> </li> </ul>"},{"location":"tutorials/rust-setup/#what-is-rust","title":"What is rust?","text":"<p>Rust is a systems-level programming language that focuses on safety, performance, and productivity. It is highly reliable and can be used for a variety of applications, leading it to gain in popularity over recent years. </p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, make sure you have:</p> <ul> <li>Git installed: Install Git if you don't already have it.</li> <li>Docker installed and running.</li> <li>Visual Studio Code (VS Code) installed.</li> <li>The Dev Containers extension installed in VS Code.</li> <li>A GitHub account: Sign up at GitHub if not.</li> </ul> <p>Warning</p> <p>Do not install Rust directly on your host machine. Always use the dev container to maintain a consistent environment.</p>"},{"location":"tutorials/rust-setup/#step-1-initialize-a-git-repository","title":"Step 1: Initialize a Git Repository","text":"<ol> <li> <p>Open your terminal or command prompt. Create a new directory for your project and initialize a Git repository:</p> Initialize Git Repository<pre><code>mkdir rust-dev-container\ncd rust-dev-container\ngit init\n</code></pre> </li> <li> <p>Create a README file:</p> Add a README File<pre><code>echo \"# Rust Dev Container Project\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre> </li> <li> <p>Navigate to GitHub to the Create a New Repository page. Create a new repo named rust-dev-container, set it to public visibility, and do not initialize any files. Push to a remote repository:</p> Push to Remote Repository<pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-dev-container.git\ngit branch -M main\ngit push -u origin main\n</code></pre> </li> </ol>"},{"location":"tutorials/rust-setup/#step-2-set-up-a-development-container","title":"Step 2: Set Up a Development Container","text":"<ol> <li> <p>Install the Dev Containers extension for VS Code. Create a <code>.devcontainer</code> directory in root of your project:</p> Create Dev Container Directory<pre><code>mkdir .devcontainer\n</code></pre> </li> <li> <p>Add the <code>devcontainer.json</code> file:</p> .devcontainer/devcontainer.json<pre><code>{\n  \"name\": \"Rust Dev Environment\",\n  \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  },\n  \"postCreateCommand\": \"cargo install cargo-edit\"\n}\n</code></pre> </li> <li> <p>Reopen the project in the dev container:</p> <ol> <li>Press <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac) in VS Code.</li> <li>Select Dev Containers: Reopen in Container.</li> </ol> </li> <li> <p>Verify the Rust version inside the dev container:</p> Check Rust Version<pre><code>rustc --version\n</code></pre> </li> </ol> <p>Note</p> <p>The <code>rustc --version</code> command makes you are using a recent version of Rust.</p>"},{"location":"tutorials/rust-setup/#step-3-create-a-rust-project","title":"Step 3: Create a Rust Project","text":"<ol> <li> <p>Inside the dev container, use this code to create a new Rust project:</p> Create a New Rust Project<pre><code>cargo new hello-comp423 --vcs none\ncd hello-comp423\n</code></pre> <p>Note</p> <p>The <code>--vcs none</code> flag makes sure no new Git repository is created in the Rust project.</p> </li> <li> <p>Open and update the <code>main.rs</code> file to print \"Hello COMP423\":</p> src/main.rs<pre><code>fn main() {\n    println!(\"Hello COMP423!\");\n}\n</code></pre> </li> </ol>"},{"location":"tutorials/rust-setup/#step-4-build-and-run-the-program","title":"Step 4: Build and Run the Program","text":"<ol> <li> <p>Build the program:</p> Build the Program<pre><code>cargo build\n</code></pre> <ul> <li>This compiles the project into executable in the <code>target/debug</code> directory.</li> </ul> <p>Note</p> <p><code>cargo</code> handles dependency management and builds the entire project, while <code>gcc</code> from COMP 211 focuses on compiling individual source files.</p> </li> <li> <p>Run the program:</p> Run the Program<pre><code>cargo run\n</code></pre> <ul> <li>The <code>cargo run</code> command combines building and executing the program in one step, while <code>cargo build</code> only compiles without running.</li> </ul> </li> </ol>"},{"location":"tutorials/rust-setup/#step-5-add-your-changes-to-git","title":"Step 5: Add Your Changes to Git","text":"<ol> <li> <p>Add and commit your changes:</p> Add and Commit Changes<pre><code>git add .\ngit commit -m \"Add Rust dev container setup and Hello COMP423 program\"\n</code></pre> </li> <li> <p>Push to your remote repository:</p> Push Changes to Remote Repository<pre><code>git push origin main\n</code></pre> </li> </ol> <p>Congrats! You have created a Dev Container project for the Rust language and basic \"Hello COMP423\" program! </p>"}]}